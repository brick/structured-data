<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="6.12.0@cf420941d061a57050b6c468ef2c778faf40aee2">
  <file src="src/DOMBuilder.php">
    <ClassMustBeFinal>
      <code><![CDATA[DOMBuilder]]></code>
    </ClassMustBeFinal>
  </file>
  <file src="src/HTMLReader.php">
    <ClassMustBeFinal>
      <code><![CDATA[HTMLReader]]></code>
    </ClassMustBeFinal>
  </file>
  <file src="src/Item.php">
    <ClassMustBeFinal>
      <code><![CDATA[Item]]></code>
    </ClassMustBeFinal>
    <DocblockTypeContradiction>
      <code><![CDATA[! $value instanceof Item && ! is_string($value)]]></code>
    </DocblockTypeContradiction>
  </file>
  <file src="src/JsonLdWriter.php">
    <ClassMustBeFinal>
      <code><![CDATA[JsonLdWriter]]></code>
    </ClassMustBeFinal>
    <FalsableReturnStatement>
      <code><![CDATA[json_encode($this->extractIfSingle($items), JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES)]]></code>
    </FalsableReturnStatement>
    <InvalidFalsableReturnType>
      <code><![CDATA[string]]></code>
    </InvalidFalsableReturnType>
    <MixedAssignment>
      <code><![CDATA[$result[$name]]]></code>
    </MixedAssignment>
  </file>
  <file src="src/Reader/JsonLdReader.php">
    <ArgumentTypeCoercion>
      <code><![CDATA[$data]]></code>
      <code><![CDATA[$item]]></code>
      <code><![CDATA[$value]]></code>
    </ArgumentTypeCoercion>
    <ClassMustBeFinal>
      <code><![CDATA[JsonLdReader]]></code>
    </ClassMustBeFinal>
    <DocblockTypeContradiction>
      <code><![CDATA[is_string($type)]]></code>
    </DocblockTypeContradiction>
    <MissingClosureParamType>
      <code><![CDATA[$a]]></code>
    </MissingClosureParamType>
    <MissingOverrideAttribute>
      <code><![CDATA[public function read(DOMDocument $document, string $url) : array]]></code>
    </MissingOverrideAttribute>
    <MixedArgument>
      <code><![CDATA[$name]]></code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$name[0]]]></code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code><![CDATA[$data]]></code>
      <code><![CDATA[$name]]></code>
      <code><![CDATA[$result[]]]></code>
      <code><![CDATA[$theValue]]></code>
      <code><![CDATA[$type]]></code>
      <code><![CDATA[$value]]></code>
    </MixedAssignment>
    <NoValue>
      <code><![CDATA[$type]]></code>
    </NoValue>
    <PossiblyInvalidArgument>
      <code><![CDATA[function(DOMNode $node) use ($url) {
            return $this->readJson($node->textContent, $url);
        }]]></code>
    </PossiblyInvalidArgument>
    <RawObjectIteration>
      <code><![CDATA[$item]]></code>
    </RawObjectIteration>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[null]]></code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Reader/MicrodataReader.php">
    <ClassMustBeFinal>
      <code><![CDATA[MicrodataReader]]></code>
    </ClassMustBeFinal>
    <InvalidArgument>
      <code><![CDATA[function(DOMNode $itemprop) use ($node, $xpath) {
            for (;;) {
                $itemprop = $itemprop->parentNode;

                if ($itemprop->isSameNode($node)) {
                    return true;
                }

                if ($itemprop->attributes->getNamedItem('itemscope')) {
                    return false;
                }
            }

            // Unreachable, but makes static analysis happy
            return false;
        }]]></code>
    </InvalidArgument>
    <MissingOverrideAttribute>
      <code><![CDATA[public function read(DOMDocument $document, string $url) : array]]></code>
    </MissingOverrideAttribute>
    <PossiblyInvalidArgument>
      <code><![CDATA[function(DOMNode $itemprop) use ($node, $xpath) {
            for (;;) {
                $itemprop = $itemprop->parentNode;

                if ($itemprop->isSameNode($node)) {
                    return true;
                }

                if ($itemprop->attributes->getNamedItem('itemscope')) {
                    return false;
                }
            }

            // Unreachable, but makes static analysis happy
            return false;
        }]]></code>
      <code><![CDATA[function(DOMNode $node) use ($xpath, $url) {
            return $this->nodeToItem($node, $xpath, $url);
        }]]></code>
    </PossiblyInvalidArgument>
    <PossiblyNullArgument>
      <code><![CDATA[$names]]></code>
      <code><![CDATA[preg_replace('/\s+/', ' ', $node->textContent)]]></code>
    </PossiblyNullArgument>
    <PossiblyNullPropertyFetch>
      <code><![CDATA[$itemprop->attributes->getNamedItem('itemprop')->textContent]]></code>
    </PossiblyNullPropertyFetch>
    <PossiblyNullReference>
      <code><![CDATA[getNamedItem]]></code>
      <code><![CDATA[getNamedItem]]></code>
      <code><![CDATA[getNamedItem]]></code>
      <code><![CDATA[getNamedItem]]></code>
      <code><![CDATA[isSameNode]]></code>
    </PossiblyNullReference>
  </file>
  <file src="src/Reader/RdfaLiteReader.php">
    <ClassMustBeFinal>
      <code><![CDATA[RdfaLiteReader]]></code>
    </ClassMustBeFinal>
    <InvalidArgument>
      <code><![CDATA[function(DOMNode $itemprop) use ($node, $xpath) {
            for (;;) {
                $itemprop = $itemprop->parentNode;

                if ($itemprop->isSameNode($node)) {
                    return true;
                }

                if ($itemprop->attributes->getNamedItem('typeof')) {
                    return false;
                }
            }

            // Unreachable, but makes static analysis happy
            return false;
        }]]></code>
    </InvalidArgument>
    <MissingOverrideAttribute>
      <code><![CDATA[public function read(DOMDocument $document, string $url) : array]]></code>
    </MissingOverrideAttribute>
    <PossiblyInvalidArgument>
      <code><![CDATA[function(DOMNode $itemprop) use ($node, $xpath) {
            for (;;) {
                $itemprop = $itemprop->parentNode;

                if ($itemprop->isSameNode($node)) {
                    return true;
                }

                if ($itemprop->attributes->getNamedItem('typeof')) {
                    return false;
                }
            }

            // Unreachable, but makes static analysis happy
            return false;
        }]]></code>
      <code><![CDATA[function(DOMNode $node) use ($xpath, $url) {
            return $this->nodeToItem($node, $xpath, $url, self::PREDEFINED_PREFIXES, null);
        }]]></code>
    </PossiblyInvalidArgument>
    <PossiblyNullArgument>
      <code><![CDATA[$names]]></code>
      <code><![CDATA[$typeof->textContent]]></code>
      <code><![CDATA[preg_replace('/\s+/', ' ', $node->textContent)]]></code>
    </PossiblyNullArgument>
    <PossiblyNullPropertyFetch>
      <code><![CDATA[$property->attributes->getNamedItem('property')->textContent]]></code>
      <code><![CDATA[$typeof->textContent]]></code>
    </PossiblyNullPropertyFetch>
    <PossiblyNullReference>
      <code><![CDATA[getNamedItem]]></code>
      <code><![CDATA[getNamedItem]]></code>
      <code><![CDATA[getNamedItem]]></code>
      <code><![CDATA[getNamedItem]]></code>
      <code><![CDATA[getNamedItem]]></code>
      <code><![CDATA[isSameNode]]></code>
    </PossiblyNullReference>
  </file>
  <file src="src/Reader/ReaderChain.php">
    <ClassMustBeFinal>
      <code><![CDATA[ReaderChain]]></code>
    </ClassMustBeFinal>
    <MissingOverrideAttribute>
      <code><![CDATA[public function read(DOMDocument $document, string $url) : array]]></code>
    </MissingOverrideAttribute>
  </file>
</files>
